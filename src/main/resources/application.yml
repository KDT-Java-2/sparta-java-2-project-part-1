spring:
  # 데이터베이스 연결 설정
  datasource:
    url: jdbc:mysql://localhost:3307/spring_yap_db?useSSL=false&allowPublicKeyRetrieval=true
    username: root
    password: root
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 10  # 최대 커넥션 개수
      connection-timeout: 30000 # 커넥션을 얻기 위해 대기하는 최대 시간 (ms)
      max-lifetime: 1800000 # 커넥션의 최대 수명 (ms)

  # JPA 및 Hibernate 설정
  jpa:
    hibernate:
      # ddl-auto: 애플리케이션 실행 시 스키마(테이블) 처리 전략
      # none: 아무 작업도 하지 않음 (운영 환경 추천)
      # create: 기존 테이블 삭제 후 다시 생성
      # update: 변경된 부분만 반영
      ddl-auto: none
    properties:
      hibernate:
        # MySQL 8 버전에 맞는 Dialect(방언) 설정
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true
        highlight_sql: true
        jdbc:
          # (필수) 한번에 묶어서 보낼 SQL 문의 개수. 50~1000 사이 값이 권장됨.
          batch_size: 1000
        order_inserts: true
        # (권장) UPDATE 문을 최적화하기 위해 재정렬
        order_updates: true
  data:
    redis:
      host: localhost
      port: 6379
      password: # 비밀번호가 없다면 비워둡니다.
      # timeout: 1s
      # database: 0

# 로깅 레벨 설정
logging:
  level:
    # Hibernate가 실행하는 SQL 쿼리를 DEBUG 레벨로 로그에 출력
    org.hibernate.SQL: DEBUG

  flyway:
    enabled: true # Flyway 활성화
    # 마이그레이션 파일 위치 지정 (기본값)
    locations: classpath:db/migration
    baseline-on-migration: true

# 내장 웹 서버 설정
server:
  port: 8080
  servlet:
    session:
      cookie:
        http-only: true

# HikariCP 커넥션 풀 현황을 보는 Spring Boot 표준 방법
# http://localhost:8080/actuator/metrics  -> 메트릭정보
# http://localhost:8080/actuator/metrics/hikaricp.connections -> 커넥션상태정보
# 다른건 찾아보세용.
management:
  endpoints:
    web:
      exposure:
        include: '*'